{"ast":null,"code":"// Sort items based on sort state\nexport const sortItems=(items,sort)=>{if(!sort.field){return items;}return[...items].sort((a,b)=>{const aValue=a[sort.field];const bValue=b[sort.field];// Handle null values\nif(aValue===null&&bValue===null)return 0;if(aValue===null)return sort.direction==='asc'?1:-1;if(bValue===null)return sort.direction==='asc'?-1:1;// Handle different data types\nlet comparison=0;if(typeof aValue==='number'&&typeof bValue==='number'){comparison=aValue-bValue;}else{// Convert to string for comparison\nconst aStr=String(aValue).toLowerCase();const bStr=String(bValue).toLowerCase();comparison=aStr.localeCompare(bStr);}return sort.direction==='asc'?comparison:-comparison;});};// Toggle sort direction for a field\nexport const toggleSort=(currentSort,field)=>{if(currentSort.field===field){// If clicking the same field, toggle direction\nreturn{field,direction:currentSort.direction==='asc'?'desc':'asc'};}else{// If clicking a different field, set to ascending\nreturn{field,direction:'asc'};}};// Get sort icon class based on current sort state\nexport const getSortIcon=(field,currentSort)=>{if(currentSort.field!==field){return'sort-none';// No sorting applied\n}return currentSort.direction==='asc'?'sort-asc':'sort-desc';};// Reset sort to no sorting\nexport const resetSort=()=>({field:null,direction:'asc'});","map":{"version":3,"names":["sortItems","items","sort","field","a","b","aValue","bValue","direction","comparison","aStr","String","toLowerCase","bStr","localeCompare","toggleSort","currentSort","getSortIcon","resetSort"],"sources":["D:/work/komus/3pl-site/src/features/inventory-table/lib/sortUtils.ts"],"sourcesContent":["import { PlacedItemDto, SortState, SortableField } from '../model/types';\r\n\r\n// Sort items based on sort state\r\nexport const sortItems = (items: PlacedItemDto[], sort: SortState): PlacedItemDto[] => {\r\n  if (!sort.field) {\r\n    return items;\r\n  }\r\n\r\n  return [...items].sort((a, b) => {\r\n    const aValue = a[sort.field!];\r\n    const bValue = b[sort.field!];\r\n\r\n    // Handle null values\r\n    if (aValue === null && bValue === null) return 0;\r\n    if (aValue === null) return sort.direction === 'asc' ? 1 : -1;\r\n    if (bValue === null) return sort.direction === 'asc' ? -1 : 1;\r\n\r\n    // Handle different data types\r\n    let comparison = 0;\r\n    \r\n    if (typeof aValue === 'number' && typeof bValue === 'number') {\r\n      comparison = aValue - bValue;\r\n    } else {\r\n      // Convert to string for comparison\r\n      const aStr = String(aValue).toLowerCase();\r\n      const bStr = String(bValue).toLowerCase();\r\n      comparison = aStr.localeCompare(bStr);\r\n    }\r\n\r\n    return sort.direction === 'asc' ? comparison : -comparison;\r\n  });\r\n};\r\n\r\n// Toggle sort direction for a field\r\nexport const toggleSort = (currentSort: SortState, field: SortableField): SortState => {\r\n  if (currentSort.field === field) {\r\n    // If clicking the same field, toggle direction\r\n    return {\r\n      field,\r\n      direction: currentSort.direction === 'asc' ? 'desc' : 'asc',\r\n    };\r\n  } else {\r\n    // If clicking a different field, set to ascending\r\n    return {\r\n      field,\r\n      direction: 'asc',\r\n    };\r\n  }\r\n};\r\n\r\n// Get sort icon class based on current sort state\r\nexport const getSortIcon = (field: SortableField, currentSort: SortState): string => {\r\n  if (currentSort.field !== field) {\r\n    return 'sort-none'; // No sorting applied\r\n  }\r\n  \r\n  return currentSort.direction === 'asc' ? 'sort-asc' : 'sort-desc';\r\n};\r\n\r\n// Reset sort to no sorting\r\nexport const resetSort = (): SortState => ({\r\n  field: null,\r\n  direction: 'asc',\r\n}); "],"mappings":"AAEA;AACA,MAAO,MAAM,CAAAA,SAAS,CAAGA,CAACC,KAAsB,CAAEC,IAAe,GAAsB,CACrF,GAAI,CAACA,IAAI,CAACC,KAAK,CAAE,CACf,MAAO,CAAAF,KAAK,CACd,CAEA,MAAO,CAAC,GAAGA,KAAK,CAAC,CAACC,IAAI,CAAC,CAACE,CAAC,CAAEC,CAAC,GAAK,CAC/B,KAAM,CAAAC,MAAM,CAAGF,CAAC,CAACF,IAAI,CAACC,KAAK,CAAE,CAC7B,KAAM,CAAAI,MAAM,CAAGF,CAAC,CAACH,IAAI,CAACC,KAAK,CAAE,CAE7B;AACA,GAAIG,MAAM,GAAK,IAAI,EAAIC,MAAM,GAAK,IAAI,CAAE,MAAO,EAAC,CAChD,GAAID,MAAM,GAAK,IAAI,CAAE,MAAO,CAAAJ,IAAI,CAACM,SAAS,GAAK,KAAK,CAAG,CAAC,CAAG,CAAC,CAAC,CAC7D,GAAID,MAAM,GAAK,IAAI,CAAE,MAAO,CAAAL,IAAI,CAACM,SAAS,GAAK,KAAK,CAAG,CAAC,CAAC,CAAG,CAAC,CAE7D;AACA,GAAI,CAAAC,UAAU,CAAG,CAAC,CAElB,GAAI,MAAO,CAAAH,MAAM,GAAK,QAAQ,EAAI,MAAO,CAAAC,MAAM,GAAK,QAAQ,CAAE,CAC5DE,UAAU,CAAGH,MAAM,CAAGC,MAAM,CAC9B,CAAC,IAAM,CACL;AACA,KAAM,CAAAG,IAAI,CAAGC,MAAM,CAACL,MAAM,CAAC,CAACM,WAAW,CAAC,CAAC,CACzC,KAAM,CAAAC,IAAI,CAAGF,MAAM,CAACJ,MAAM,CAAC,CAACK,WAAW,CAAC,CAAC,CACzCH,UAAU,CAAGC,IAAI,CAACI,aAAa,CAACD,IAAI,CAAC,CACvC,CAEA,MAAO,CAAAX,IAAI,CAACM,SAAS,GAAK,KAAK,CAAGC,UAAU,CAAG,CAACA,UAAU,CAC5D,CAAC,CAAC,CACJ,CAAC,CAED;AACA,MAAO,MAAM,CAAAM,UAAU,CAAGA,CAACC,WAAsB,CAAEb,KAAoB,GAAgB,CACrF,GAAIa,WAAW,CAACb,KAAK,GAAKA,KAAK,CAAE,CAC/B;AACA,MAAO,CACLA,KAAK,CACLK,SAAS,CAAEQ,WAAW,CAACR,SAAS,GAAK,KAAK,CAAG,MAAM,CAAG,KACxD,CAAC,CACH,CAAC,IAAM,CACL;AACA,MAAO,CACLL,KAAK,CACLK,SAAS,CAAE,KACb,CAAC,CACH,CACF,CAAC,CAED;AACA,MAAO,MAAM,CAAAS,WAAW,CAAGA,CAACd,KAAoB,CAAEa,WAAsB,GAAa,CACnF,GAAIA,WAAW,CAACb,KAAK,GAAKA,KAAK,CAAE,CAC/B,MAAO,WAAW,CAAE;AACtB,CAEA,MAAO,CAAAa,WAAW,CAACR,SAAS,GAAK,KAAK,CAAG,UAAU,CAAG,WAAW,CACnE,CAAC,CAED;AACA,MAAO,MAAM,CAAAU,SAAS,CAAGA,CAAA,IAAkB,CACzCf,KAAK,CAAE,IAAI,CACXK,SAAS,CAAE,KACb,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}