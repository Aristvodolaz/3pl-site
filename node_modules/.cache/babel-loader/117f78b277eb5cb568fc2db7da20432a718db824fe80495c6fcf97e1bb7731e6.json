{"ast":null,"code":"var _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport { useState, useEffect, useMemo } from 'react';\nimport { inventoryApi } from '@/shared/api/inventory';\nimport { filterItems, resetFilters } from '../lib/filterUtils';\nimport { sortItems, resetSort } from '../lib/sortUtils';\nimport { getPaginatedData, updatePaginationForNewData, resetPagination } from '../lib/paginationUtils';\nimport { PAGINATION } from '@/shared/config/constants';\n\n// Main hook for inventory table management\nexport const useInventoryTable = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [filters, setFilters] = useState(resetFilters());\n  const [sort, setSort] = useState(resetSort());\n  const [pagination, setPagination] = useState(resetPagination(PAGINATION.DEFAULT_PAGE_SIZE));\n\n  // Load data from API\n  const loadData = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await inventoryApi.getPlacedItems();\n      if (response.success) {\n        setData(response.value.items);\n      } else {\n        throw new Error(`API Error: ${response.errorCode}`);\n      }\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Неизвестная ошибка';\n      setError(errorMessage);\n      console.error('Error loading inventory data:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Load data on component mount\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  // Calculate filtered and sorted data\n  const filteredData = useMemo(() => {\n    let result = filterItems(data, filters);\n    result = sortItems(result, sort);\n    return result;\n  }, [data, filters, sort]);\n\n  // Update pagination when filtered data changes\n  useEffect(() => {\n    setPagination(prev => updatePaginationForNewData(prev, filteredData.length));\n  }, [filteredData.length]);\n\n  // Calculate paginated data\n  const paginatedData = useMemo(() => {\n    return getPaginatedData(filteredData, pagination);\n  }, [filteredData, pagination]);\n\n  // Update filters\n  const updateFilters = newFilters => {\n    setFilters(prev => ({\n      ...prev,\n      ...newFilters\n    }));\n  };\n\n  // Reset all filters\n  const handleResetFilters = () => {\n    setFilters(resetFilters());\n    setSort(resetSort());\n    setPagination(resetPagination(pagination.pageSize));\n  };\n\n  // Update sort\n  const updateSort = newSort => {\n    setSort(newSort);\n  };\n\n  // Update pagination\n  const updatePagination = newPagination => {\n    setPagination(prev => ({\n      ...prev,\n      ...newPagination\n    }));\n  };\n\n  // Go to specific page\n  const goToPage = page => {\n    setPagination(prev => ({\n      ...prev,\n      currentPage: page\n    }));\n  };\n\n  // Change page size\n  const changePageSize = pageSize => {\n    setPagination(prev => ({\n      ...prev,\n      pageSize,\n      currentPage: 1 // Reset to first page when changing page size\n    }));\n  };\n  return {\n    // Data\n    data,\n    filteredData,\n    paginatedData,\n    // State\n    loading,\n    error,\n    filters,\n    sort,\n    pagination,\n    // Actions\n    loadData,\n    updateFilters,\n    handleResetFilters,\n    updateSort,\n    updatePagination,\n    goToPage,\n    changePageSize\n  };\n};\n\n// Hook for managing dark mode\n_s(useInventoryTable, \"X71eTpeaL6fuxfjpjvAW8N/RD5Q=\");\nexport const useDarkMode = () => {\n  _s2();\n  const [isDark, setIsDark] = useState(() => {\n    // Check localStorage or system preference\n    if (typeof window !== 'undefined') {\n      const stored = localStorage.getItem('darkMode');\n      if (stored) {\n        return stored === 'true';\n      }\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\n    }\n    return false;\n  });\n  useEffect(() => {\n    if (typeof window !== 'undefined') {\n      localStorage.setItem('darkMode', isDark.toString());\n      if (isDark) {\n        document.documentElement.classList.add('dark');\n      } else {\n        document.documentElement.classList.remove('dark');\n      }\n    }\n  }, [isDark]);\n  const toggleDarkMode = () => {\n    setIsDark(prev => !prev);\n  };\n  return {\n    isDark,\n    toggleDarkMode\n  };\n};\n_s2(useDarkMode, \"TYE2uDpO6erso5FhC/M6/rPFtyM=\");","map":{"version":3,"names":["useState","useEffect","useMemo","inventoryApi","filterItems","resetFilters","sortItems","resetSort","getPaginatedData","updatePaginationForNewData","resetPagination","PAGINATION","useInventoryTable","_s","data","setData","loading","setLoading","error","setError","filters","setFilters","sort","setSort","pagination","setPagination","DEFAULT_PAGE_SIZE","loadData","response","getPlacedItems","success","value","items","Error","errorCode","err","errorMessage","message","console","filteredData","result","prev","length","paginatedData","updateFilters","newFilters","handleResetFilters","pageSize","updateSort","newSort","updatePagination","newPagination","goToPage","page","currentPage","changePageSize","useDarkMode","_s2","isDark","setIsDark","window","stored","localStorage","getItem","matchMedia","matches","setItem","toString","document","documentElement","classList","add","remove","toggleDarkMode"],"sources":["D:/work/komus/3pl-site/src/features/inventory-table/model/hooks.ts"],"sourcesContent":["import { useState, useEffect, useMemo } from 'react';\r\nimport { PlacedItemDto, TableState, FilterState, SortState, PaginationState } from './types';\r\nimport { inventoryApi } from '@/shared/api/inventory';\r\nimport { filterItems, resetFilters } from '../lib/filterUtils';\r\nimport { sortItems, resetSort } from '../lib/sortUtils';\r\nimport { getPaginatedData, updatePaginationForNewData, resetPagination } from '../lib/paginationUtils';\r\nimport { PAGINATION } from '@/shared/config/constants';\r\n\r\n// Main hook for inventory table management\r\nexport const useInventoryTable = () => {\r\n  const [data, setData] = useState<PlacedItemDto[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  \r\n  const [filters, setFilters] = useState<FilterState>(resetFilters());\r\n  const [sort, setSort] = useState<SortState>(resetSort());\r\n  const [pagination, setPagination] = useState<PaginationState>(\r\n    resetPagination(PAGINATION.DEFAULT_PAGE_SIZE)\r\n  );\r\n\r\n  // Load data from API\r\n  const loadData = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    \r\n    try {\r\n      const response = await inventoryApi.getPlacedItems();\r\n      \r\n      if (response.success) {\r\n        setData(response.value.items);\r\n      } else {\r\n        throw new Error(`API Error: ${response.errorCode}`);\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Неизвестная ошибка';\r\n      setError(errorMessage);\r\n      console.error('Error loading inventory data:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Load data on component mount\r\n  useEffect(() => {\r\n    loadData();\r\n  }, []);\r\n\r\n  // Calculate filtered and sorted data\r\n  const filteredData = useMemo(() => {\r\n    let result = filterItems(data, filters);\r\n    result = sortItems(result, sort);\r\n    return result;\r\n  }, [data, filters, sort]);\r\n\r\n  // Update pagination when filtered data changes\r\n  useEffect(() => {\r\n    setPagination(prev => updatePaginationForNewData(prev, filteredData.length));\r\n  }, [filteredData.length]);\r\n\r\n  // Calculate paginated data\r\n  const paginatedData = useMemo(() => {\r\n    return getPaginatedData(filteredData, pagination);\r\n  }, [filteredData, pagination]);\r\n\r\n  // Update filters\r\n  const updateFilters = (newFilters: Partial<FilterState>) => {\r\n    setFilters(prev => ({ ...prev, ...newFilters }));\r\n  };\r\n\r\n  // Reset all filters\r\n  const handleResetFilters = () => {\r\n    setFilters(resetFilters());\r\n    setSort(resetSort());\r\n    setPagination(resetPagination(pagination.pageSize));\r\n  };\r\n\r\n  // Update sort\r\n  const updateSort = (newSort: SortState) => {\r\n    setSort(newSort);\r\n  };\r\n\r\n  // Update pagination\r\n  const updatePagination = (newPagination: Partial<PaginationState>) => {\r\n    setPagination(prev => ({ ...prev, ...newPagination }));\r\n  };\r\n\r\n  // Go to specific page\r\n  const goToPage = (page: number) => {\r\n    setPagination(prev => ({ ...prev, currentPage: page }));\r\n  };\r\n\r\n  // Change page size\r\n  const changePageSize = (pageSize: number) => {\r\n    setPagination(prev => ({\r\n      ...prev,\r\n      pageSize,\r\n      currentPage: 1, // Reset to first page when changing page size\r\n    }));\r\n  };\r\n\r\n  return {\r\n    // Data\r\n    data,\r\n    filteredData,\r\n    paginatedData,\r\n    \r\n    // State\r\n    loading,\r\n    error,\r\n    filters,\r\n    sort,\r\n    pagination,\r\n    \r\n    // Actions\r\n    loadData,\r\n    updateFilters,\r\n    handleResetFilters,\r\n    updateSort,\r\n    updatePagination,\r\n    goToPage,\r\n    changePageSize,\r\n  };\r\n};\r\n\r\n// Hook for managing dark mode\r\nexport const useDarkMode = () => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    // Check localStorage or system preference\r\n    if (typeof window !== 'undefined') {\r\n      const stored = localStorage.getItem('darkMode');\r\n      if (stored) {\r\n        return stored === 'true';\r\n      }\r\n      return window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n    }\r\n    return false;\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.setItem('darkMode', isDark.toString());\r\n      \r\n      if (isDark) {\r\n        document.documentElement.classList.add('dark');\r\n      } else {\r\n        document.documentElement.classList.remove('dark');\r\n      }\r\n    }\r\n  }, [isDark]);\r\n\r\n  const toggleDarkMode = () => {\r\n    setIsDark(prev => !prev);\r\n  };\r\n\r\n  return { isDark, toggleDarkMode };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}