{"ast":null,"code":"import*as XLSX from'xlsx';// Column headers mapping for Excel export\nconst COLUMN_HEADERS={id:'ID',shk:'ШК',name:'Наименование',wr_shk:'ШК ячейки',wr_name:'Название ячейки',kolvo:'Количество',condition:'Состояние',reason:'Причина',ispolnitel:'Исполнитель',date:'Дата создания',date_upd:'Дата обновления'};// Format date for Excel\nconst formatDateForExcel=dateString=>{if(!dateString)return'';const date=new Date(dateString);return date.toLocaleDateString('ru-RU',{year:'numeric',month:'2-digit',day:'2-digit',hour:'2-digit',minute:'2-digit'});};// Map condition values for Excel\nconst mapConditionForExcel=condition=>{const conditionMap={Good:'Кондиция',Defective:'Некондиция'};return conditionMap[condition]||condition;};// Export data to Excel file\nexport const exportToExcel=(data,filename)=>{try{// Prepare data for Excel with proper headers\nconst excelData=data.map(item=>({[COLUMN_HEADERS.id]:item.id,[COLUMN_HEADERS.shk]:item.shk,[COLUMN_HEADERS.name]:item.name,[COLUMN_HEADERS.wr_shk]:item.wr_shk||'',[COLUMN_HEADERS.wr_name]:item.wr_name||'',[COLUMN_HEADERS.kolvo]:item.kolvo,[COLUMN_HEADERS.condition]:mapConditionForExcel(item.condition),[COLUMN_HEADERS.reason]:item.reason||'',[COLUMN_HEADERS.ispolnitel]:item.ispolnitel,[COLUMN_HEADERS.date]:formatDateForExcel(item.date),[COLUMN_HEADERS.date_upd]:formatDateForExcel(item.date_upd)}));// Create workbook and worksheet\nconst workbook=XLSX.utils.book_new();const worksheet=XLSX.utils.json_to_sheet(excelData);// Set column widths for better readability\nconst columnWidths=[{wch:8},// ID\n{wch:15},// ШК\n{wch:30},// Наименование\n{wch:15},// ШК ячейки\n{wch:20},// Название ячейки\n{wch:12},// Количество\n{wch:15},// Состояние\n{wch:25},// Причина\n{wch:30},// Исполнитель\n{wch:18},// Дата создания\n{wch:18}// Дата обновления\n];worksheet['!cols']=columnWidths;// Add worksheet to workbook\nXLSX.utils.book_append_sheet(workbook,worksheet,'Размещенный товар');// Generate filename with current date if not provided\nconst defaultFilename=\"inventory_export_\".concat(new Date().toISOString().slice(0,19).replace(/:/g,'-'),\".xlsx\");const finalFilename=filename||defaultFilename;// Write and download the file\nXLSX.writeFile(workbook,finalFilename);}catch(error){console.error('Error exporting to Excel:',error);throw new Error('Не удалось экспортировать данные в Excel');}};// Get export summary info\nexport const getExportSummary=(totalItems,filteredItems)=>{if(totalItems===filteredItems){return\"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043E \".concat(totalItems,\" \\u0437\\u0430\\u043F\\u0438\\u0441\\u0435\\u0439\");}return\"\\u042D\\u043A\\u0441\\u043F\\u043E\\u0440\\u0442\\u0438\\u0440\\u043E\\u0432\\u0430\\u043D\\u043E \".concat(filteredItems,\" \\u0438\\u0437 \").concat(totalItems,\" \\u0437\\u0430\\u043F\\u0438\\u0441\\u0435\\u0439 (\\u0441 \\u0443\\u0447\\u0435\\u0442\\u043E\\u043C \\u0444\\u0438\\u043B\\u044C\\u0442\\u0440\\u043E\\u0432)\");};","map":{"version":3,"names":["XLSX","COLUMN_HEADERS","id","shk","name","wr_shk","wr_name","kolvo","condition","reason","ispolnitel","date","date_upd","formatDateForExcel","dateString","Date","toLocaleDateString","year","month","day","hour","minute","mapConditionForExcel","conditionMap","Good","Defective","exportToExcel","data","filename","excelData","map","item","workbook","utils","book_new","worksheet","json_to_sheet","columnWidths","wch","book_append_sheet","defaultFilename","concat","toISOString","slice","replace","finalFilename","writeFile","error","console","Error","getExportSummary","totalItems","filteredItems"],"sources":["D:/work/komus/3pl-site/src/shared/utils/exportToExcel.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\nimport { PlacedItemDto } from '../../features/inventory-table/model/types';\n\n// Column headers mapping for Excel export\nconst COLUMN_HEADERS = {\n  id: 'ID',\n  shk: 'ШК',\n  name: 'Наименование',\n  wr_shk: 'ШК ячейки',\n  wr_name: 'Название ячейки',\n  kolvo: 'Количество',\n  condition: 'Состояние',\n  reason: 'Причина',\n  ispolnitel: 'Исполнитель',\n  date: 'Дата создания',\n  date_upd: 'Дата обновления',\n};\n\n// Format date for Excel\nconst formatDateForExcel = (dateString: string | null): string => {\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  return date.toLocaleDateString('ru-RU', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n};\n\n// Map condition values for Excel\nconst mapConditionForExcel = (condition: string): string => {\n  const conditionMap: { [key: string]: string } = {\n    Good: 'Кондиция',\n    Defective: 'Некондиция',\n  };\n  return conditionMap[condition] || condition;\n};\n\n// Export data to Excel file\nexport const exportToExcel = (data: PlacedItemDto[], filename?: string): void => {\n  try {\n    // Prepare data for Excel with proper headers\n    const excelData = data.map(item => ({\n      [COLUMN_HEADERS.id]: item.id,\n      [COLUMN_HEADERS.shk]: item.shk,\n      [COLUMN_HEADERS.name]: item.name,\n      [COLUMN_HEADERS.wr_shk]: item.wr_shk || '',\n      [COLUMN_HEADERS.wr_name]: item.wr_name || '',\n      [COLUMN_HEADERS.kolvo]: item.kolvo,\n      [COLUMN_HEADERS.condition]: mapConditionForExcel(item.condition),\n      [COLUMN_HEADERS.reason]: item.reason || '',\n      [COLUMN_HEADERS.ispolnitel]: item.ispolnitel,\n      [COLUMN_HEADERS.date]: formatDateForExcel(item.date),\n      [COLUMN_HEADERS.date_upd]: formatDateForExcel(item.date_upd),\n    }));\n\n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n\n    // Set column widths for better readability\n    const columnWidths = [\n      { wch: 8 },  // ID\n      { wch: 15 }, // ШК\n      { wch: 30 }, // Наименование\n      { wch: 15 }, // ШК ячейки\n      { wch: 20 }, // Название ячейки\n      { wch: 12 }, // Количество\n      { wch: 15 }, // Состояние\n      { wch: 25 }, // Причина\n      { wch: 30 }, // Исполнитель\n      { wch: 18 }, // Дата создания\n      { wch: 18 }, // Дата обновления\n    ];\n    worksheet['!cols'] = columnWidths;\n\n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Размещенный товар');\n\n    // Generate filename with current date if not provided\n    const defaultFilename = `inventory_export_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;\n    const finalFilename = filename || defaultFilename;\n\n    // Write and download the file\n    XLSX.writeFile(workbook, finalFilename);\n  } catch (error) {\n    console.error('Error exporting to Excel:', error);\n    throw new Error('Не удалось экспортировать данные в Excel');\n  }\n};\n\n// Get export summary info\nexport const getExportSummary = (totalItems: number, filteredItems: number): string => {\n  if (totalItems === filteredItems) {\n    return `Экспортировано ${totalItems} записей`;\n  }\n  return `Экспортировано ${filteredItems} из ${totalItems} записей (с учетом фильтров)`;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}