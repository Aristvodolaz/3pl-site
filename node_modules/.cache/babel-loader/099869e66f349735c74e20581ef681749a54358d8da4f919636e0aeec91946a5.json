{"ast":null,"code":"import * as XLSX from 'xlsx';\n// Column headers mapping for Excel export\nconst COLUMN_HEADERS = {\n  id: 'ID',\n  shk: 'ШК',\n  name: 'Наименование',\n  wr_shk: 'ШК ячейки',\n  wr_name: 'Название ячейки',\n  kolvo: 'Количество',\n  condition: 'Состояние',\n  reason: 'Причина',\n  ispolnitel: 'Исполнитель',\n  date: 'Дата создания',\n  date_upd: 'Дата обновления'\n};\n\n// Format date for Excel\nconst formatDateForExcel = dateString => {\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  return date.toLocaleDateString('ru-RU', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit'\n  });\n};\n\n// Map condition values for Excel\nconst mapConditionForExcel = condition => {\n  const conditionMap = {\n    Good: 'Кондиция',\n    Defective: 'Некондиция'\n  };\n  return conditionMap[condition] || condition;\n};\n\n// Export data to Excel file\nexport const exportToExcel = (data, filename) => {\n  try {\n    // Prepare data for Excel with proper headers\n    const excelData = data.map(item => ({\n      [COLUMN_HEADERS.id]: item.id,\n      [COLUMN_HEADERS.shk]: item.shk,\n      [COLUMN_HEADERS.name]: item.name,\n      [COLUMN_HEADERS.wr_shk]: item.wr_shk || '',\n      [COLUMN_HEADERS.wr_name]: item.wr_name || '',\n      [COLUMN_HEADERS.kolvo]: item.kolvo,\n      [COLUMN_HEADERS.condition]: mapConditionForExcel(item.condition),\n      [COLUMN_HEADERS.reason]: item.reason || '',\n      [COLUMN_HEADERS.ispolnitel]: item.ispolnitel,\n      [COLUMN_HEADERS.date]: formatDateForExcel(item.date),\n      [COLUMN_HEADERS.date_upd]: formatDateForExcel(item.date_upd)\n    }));\n\n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n\n    // Set column widths for better readability\n    const columnWidths = [{\n      wch: 8\n    },\n    // ID\n    {\n      wch: 15\n    },\n    // ШК\n    {\n      wch: 30\n    },\n    // Наименование\n    {\n      wch: 15\n    },\n    // ШК ячейки\n    {\n      wch: 20\n    },\n    // Название ячейки\n    {\n      wch: 12\n    },\n    // Количество\n    {\n      wch: 15\n    },\n    // Состояние\n    {\n      wch: 25\n    },\n    // Причина\n    {\n      wch: 30\n    },\n    // Исполнитель\n    {\n      wch: 18\n    },\n    // Дата создания\n    {\n      wch: 18\n    } // Дата обновления\n    ];\n    worksheet['!cols'] = columnWidths;\n\n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Размещенный товар');\n\n    // Generate filename with current date if not provided\n    const defaultFilename = `inventory_export_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;\n    const finalFilename = filename || defaultFilename;\n\n    // Write and download the file\n    XLSX.writeFile(workbook, finalFilename);\n  } catch (error) {\n    console.error('Error exporting to Excel:', error);\n    throw new Error('Не удалось экспортировать данные в Excel');\n  }\n};\n\n// Get export summary info\nexport const getExportSummary = (totalItems, filteredItems) => {\n  if (totalItems === filteredItems) {\n    return `Экспортировано ${totalItems} записей`;\n  }\n  return `Экспортировано ${filteredItems} из ${totalItems} записей (с учетом фильтров)`;\n};","map":{"version":3,"names":["XLSX","COLUMN_HEADERS","id","shk","name","wr_shk","wr_name","kolvo","condition","reason","ispolnitel","date","date_upd","formatDateForExcel","dateString","Date","toLocaleDateString","year","month","day","hour","minute","mapConditionForExcel","conditionMap","Good","Defective","exportToExcel","data","filename","excelData","map","item","workbook","utils","book_new","worksheet","json_to_sheet","columnWidths","wch","book_append_sheet","defaultFilename","toISOString","slice","replace","finalFilename","writeFile","error","console","Error","getExportSummary","totalItems","filteredItems"],"sources":["D:/work/komus/3pl-site/src/shared/utils/exportToExcel.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\nimport { PlacedItemDto } from '../../features/inventory-table/model/types';\n\n// Column headers mapping for Excel export\nconst COLUMN_HEADERS = {\n  id: 'ID',\n  shk: 'ШК',\n  name: 'Наименование',\n  wr_shk: 'ШК ячейки',\n  wr_name: 'Название ячейки',\n  kolvo: 'Количество',\n  condition: 'Состояние',\n  reason: 'Причина',\n  ispolnitel: 'Исполнитель',\n  date: 'Дата создания',\n  date_upd: 'Дата обновления',\n};\n\n// Format date for Excel\nconst formatDateForExcel = (dateString: string | null): string => {\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  return date.toLocaleDateString('ru-RU', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n  });\n};\n\n// Map condition values for Excel\nconst mapConditionForExcel = (condition: string): string => {\n  const conditionMap: { [key: string]: string } = {\n    Good: 'Кондиция',\n    Defective: 'Некондиция',\n  };\n  return conditionMap[condition] || condition;\n};\n\n// Export data to Excel file\nexport const exportToExcel = (data: PlacedItemDto[], filename?: string): void => {\n  try {\n    // Prepare data for Excel with proper headers\n    const excelData = data.map(item => ({\n      [COLUMN_HEADERS.id]: item.id,\n      [COLUMN_HEADERS.shk]: item.shk,\n      [COLUMN_HEADERS.name]: item.name,\n      [COLUMN_HEADERS.wr_shk]: item.wr_shk || '',\n      [COLUMN_HEADERS.wr_name]: item.wr_name || '',\n      [COLUMN_HEADERS.kolvo]: item.kolvo,\n      [COLUMN_HEADERS.condition]: mapConditionForExcel(item.condition),\n      [COLUMN_HEADERS.reason]: item.reason || '',\n      [COLUMN_HEADERS.ispolnitel]: item.ispolnitel,\n      [COLUMN_HEADERS.date]: formatDateForExcel(item.date),\n      [COLUMN_HEADERS.date_upd]: formatDateForExcel(item.date_upd),\n    }));\n\n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n\n    // Set column widths for better readability\n    const columnWidths = [\n      { wch: 8 },  // ID\n      { wch: 15 }, // ШК\n      { wch: 30 }, // Наименование\n      { wch: 15 }, // ШК ячейки\n      { wch: 20 }, // Название ячейки\n      { wch: 12 }, // Количество\n      { wch: 15 }, // Состояние\n      { wch: 25 }, // Причина\n      { wch: 30 }, // Исполнитель\n      { wch: 18 }, // Дата создания\n      { wch: 18 }, // Дата обновления\n    ];\n    worksheet['!cols'] = columnWidths;\n\n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Размещенный товар');\n\n    // Generate filename with current date if not provided\n    const defaultFilename = `inventory_export_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;\n    const finalFilename = filename || defaultFilename;\n\n    // Write and download the file\n    XLSX.writeFile(workbook, finalFilename);\n  } catch (error) {\n    console.error('Error exporting to Excel:', error);\n    throw new Error('Не удалось экспортировать данные в Excel');\n  }\n};\n\n// Get export summary info\nexport const getExportSummary = (totalItems: number, filteredItems: number): string => {\n  if (totalItems === filteredItems) {\n    return `Экспортировано ${totalItems} записей`;\n  }\n  return `Экспортировано ${filteredItems} из ${totalItems} записей (с учетом фильтров)`;\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}