{"ast":null,"code":"// Sort items based on sort state\nexport const sortItems = (items, sort) => {\n  if (!sort.field) {\n    return items;\n  }\n  return [...items].sort((a, b) => {\n    const aValue = a[sort.field];\n    const bValue = b[sort.field];\n\n    // Handle null values\n    if (aValue === null && bValue === null) return 0;\n    if (aValue === null) return sort.direction === 'asc' ? 1 : -1;\n    if (bValue === null) return sort.direction === 'asc' ? -1 : 1;\n\n    // Handle different data types\n    let comparison = 0;\n    if (typeof aValue === 'number' && typeof bValue === 'number') {\n      comparison = aValue - bValue;\n    } else {\n      // Convert to string for comparison\n      const aStr = String(aValue).toLowerCase();\n      const bStr = String(bValue).toLowerCase();\n      comparison = aStr.localeCompare(bStr);\n    }\n    return sort.direction === 'asc' ? comparison : -comparison;\n  });\n};\n\n// Toggle sort direction for a field\nexport const toggleSort = (currentSort, field) => {\n  if (currentSort.field === field) {\n    // If clicking the same field, toggle direction\n    return {\n      field,\n      direction: currentSort.direction === 'asc' ? 'desc' : 'asc'\n    };\n  } else {\n    // If clicking a different field, set to ascending\n    return {\n      field,\n      direction: 'asc'\n    };\n  }\n};\n\n// Get sort icon class based on current sort state\nexport const getSortIcon = (field, currentSort) => {\n  if (currentSort.field !== field) {\n    return 'sort-none'; // No sorting applied\n  }\n  return currentSort.direction === 'asc' ? 'sort-asc' : 'sort-desc';\n};\n\n// Reset sort to no sorting\nexport const resetSort = () => ({\n  field: null,\n  direction: 'asc'\n});","map":{"version":3,"names":["sortItems","items","sort","field","a","b","aValue","bValue","direction","comparison","aStr","String","toLowerCase","bStr","localeCompare","toggleSort","currentSort","getSortIcon","resetSort"],"sources":["D:/work/komus/3pl-site/src/features/inventory-table/lib/sortUtils.ts"],"sourcesContent":["import { PlacedItemDto, SortState, SortableField } from '../model/types';\r\n\r\n// Sort items based on sort state\r\nexport const sortItems = (items: PlacedItemDto[], sort: SortState): PlacedItemDto[] => {\r\n  if (!sort.field) {\r\n    return items;\r\n  }\r\n\r\n  return [...items].sort((a, b) => {\r\n    const aValue = a[sort.field!];\r\n    const bValue = b[sort.field!];\r\n\r\n    // Handle null values\r\n    if (aValue === null && bValue === null) return 0;\r\n    if (aValue === null) return sort.direction === 'asc' ? 1 : -1;\r\n    if (bValue === null) return sort.direction === 'asc' ? -1 : 1;\r\n\r\n    // Handle different data types\r\n    let comparison = 0;\r\n    \r\n    if (typeof aValue === 'number' && typeof bValue === 'number') {\r\n      comparison = aValue - bValue;\r\n    } else {\r\n      // Convert to string for comparison\r\n      const aStr = String(aValue).toLowerCase();\r\n      const bStr = String(bValue).toLowerCase();\r\n      comparison = aStr.localeCompare(bStr);\r\n    }\r\n\r\n    return sort.direction === 'asc' ? comparison : -comparison;\r\n  });\r\n};\r\n\r\n// Toggle sort direction for a field\r\nexport const toggleSort = (currentSort: SortState, field: SortableField): SortState => {\r\n  if (currentSort.field === field) {\r\n    // If clicking the same field, toggle direction\r\n    return {\r\n      field,\r\n      direction: currentSort.direction === 'asc' ? 'desc' : 'asc',\r\n    };\r\n  } else {\r\n    // If clicking a different field, set to ascending\r\n    return {\r\n      field,\r\n      direction: 'asc',\r\n    };\r\n  }\r\n};\r\n\r\n// Get sort icon class based on current sort state\r\nexport const getSortIcon = (field: SortableField, currentSort: SortState): string => {\r\n  if (currentSort.field !== field) {\r\n    return 'sort-none'; // No sorting applied\r\n  }\r\n  \r\n  return currentSort.direction === 'asc' ? 'sort-asc' : 'sort-desc';\r\n};\r\n\r\n// Reset sort to no sorting\r\nexport const resetSort = (): SortState => ({\r\n  field: null,\r\n  direction: 'asc',\r\n}); "],"mappings":"AAEA;AACA,OAAO,MAAMA,SAAS,GAAGA,CAACC,KAAsB,EAAEC,IAAe,KAAsB;EACrF,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;IACf,OAAOF,KAAK;EACd;EAEA,OAAO,CAAC,GAAGA,KAAK,CAAC,CAACC,IAAI,CAAC,CAACE,CAAC,EAAEC,CAAC,KAAK;IAC/B,MAAMC,MAAM,GAAGF,CAAC,CAACF,IAAI,CAACC,KAAK,CAAE;IAC7B,MAAMI,MAAM,GAAGF,CAAC,CAACH,IAAI,CAACC,KAAK,CAAE;;IAE7B;IACA,IAAIG,MAAM,KAAK,IAAI,IAAIC,MAAM,KAAK,IAAI,EAAE,OAAO,CAAC;IAChD,IAAID,MAAM,KAAK,IAAI,EAAE,OAAOJ,IAAI,CAACM,SAAS,KAAK,KAAK,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7D,IAAID,MAAM,KAAK,IAAI,EAAE,OAAOL,IAAI,CAACM,SAAS,KAAK,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC;;IAE7D;IACA,IAAIC,UAAU,GAAG,CAAC;IAElB,IAAI,OAAOH,MAAM,KAAK,QAAQ,IAAI,OAAOC,MAAM,KAAK,QAAQ,EAAE;MAC5DE,UAAU,GAAGH,MAAM,GAAGC,MAAM;IAC9B,CAAC,MAAM;MACL;MACA,MAAMG,IAAI,GAAGC,MAAM,CAACL,MAAM,CAAC,CAACM,WAAW,CAAC,CAAC;MACzC,MAAMC,IAAI,GAAGF,MAAM,CAACJ,MAAM,CAAC,CAACK,WAAW,CAAC,CAAC;MACzCH,UAAU,GAAGC,IAAI,CAACI,aAAa,CAACD,IAAI,CAAC;IACvC;IAEA,OAAOX,IAAI,CAACM,SAAS,KAAK,KAAK,GAAGC,UAAU,GAAG,CAACA,UAAU;EAC5D,CAAC,CAAC;AACJ,CAAC;;AAED;AACA,OAAO,MAAMM,UAAU,GAAGA,CAACC,WAAsB,EAAEb,KAAoB,KAAgB;EACrF,IAAIa,WAAW,CAACb,KAAK,KAAKA,KAAK,EAAE;IAC/B;IACA,OAAO;MACLA,KAAK;MACLK,SAAS,EAAEQ,WAAW,CAACR,SAAS,KAAK,KAAK,GAAG,MAAM,GAAG;IACxD,CAAC;EACH,CAAC,MAAM;IACL;IACA,OAAO;MACLL,KAAK;MACLK,SAAS,EAAE;IACb,CAAC;EACH;AACF,CAAC;;AAED;AACA,OAAO,MAAMS,WAAW,GAAGA,CAACd,KAAoB,EAAEa,WAAsB,KAAa;EACnF,IAAIA,WAAW,CAACb,KAAK,KAAKA,KAAK,EAAE;IAC/B,OAAO,WAAW,CAAC,CAAC;EACtB;EAEA,OAAOa,WAAW,CAACR,SAAS,KAAK,KAAK,GAAG,UAAU,GAAG,WAAW;AACnE,CAAC;;AAED;AACA,OAAO,MAAMU,SAAS,GAAGA,CAAA,MAAkB;EACzCf,KAAK,EAAE,IAAI;EACXK,SAAS,EAAE;AACb,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}