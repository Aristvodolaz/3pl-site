{"ast":null,"code":"import * as XLSX from 'xlsx';\n// Column headers mapping for Excel export\nconst COLUMN_HEADERS = {\n  shk: 'ШК',\n  name: 'Наименование',\n  wr_shk: 'ШК ячейки',\n  wr_name: 'Название ячейки',\n  kolvo: 'Количество',\n  condition: 'Состояние',\n  reason: 'Причина'\n};\n\n// Export data to Excel file\nexport const exportToExcel = (data, filename) => {\n  try {\n    // Prepare data for Excel with proper headers\n    const excelData = data.map(item => ({\n      [COLUMN_HEADERS.shk]: item.shk,\n      [COLUMN_HEADERS.name]: item.name,\n      [COLUMN_HEADERS.wr_shk]: item.wr_shk || '',\n      [COLUMN_HEADERS.wr_name]: item.wr_name || '',\n      [COLUMN_HEADERS.kolvo]: item.kolvo,\n      [COLUMN_HEADERS.condition]: item.condition,\n      [COLUMN_HEADERS.reason]: item.reason || ''\n    }));\n\n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n\n    // Set column widths for better readability\n    const columnWidths = [{\n      wch: 15\n    },\n    // ШК\n    {\n      wch: 30\n    },\n    // Наименование\n    {\n      wch: 15\n    },\n    // ШК ячейки\n    {\n      wch: 30\n    },\n    // Название ячейки\n    {\n      wch: 12\n    },\n    // Количество\n    {\n      wch: 15\n    },\n    // Состояние\n    {\n      wch: 20\n    } // Причина\n    ];\n    worksheet['!cols'] = columnWidths;\n\n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Размещенный товар');\n\n    // Generate filename with current date if not provided\n    const defaultFilename = `inventory_export_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;\n    const finalFilename = filename || defaultFilename;\n\n    // Write and download the file\n    XLSX.writeFile(workbook, finalFilename);\n  } catch (error) {\n    console.error('Error exporting to Excel:', error);\n    throw new Error('Не удалось экспортировать данные в Excel');\n  }\n};\n\n// Get export summary info\nexport const getExportSummary = (totalItems, filteredItems) => {\n  if (totalItems === filteredItems) {\n    return `Экспортировано ${totalItems} записей`;\n  }\n  return `Экспортировано ${filteredItems} из ${totalItems} записей (с учетом фильтров)`;\n};","map":{"version":3,"names":["XLSX","COLUMN_HEADERS","shk","name","wr_shk","wr_name","kolvo","condition","reason","exportToExcel","data","filename","excelData","map","item","workbook","utils","book_new","worksheet","json_to_sheet","columnWidths","wch","book_append_sheet","defaultFilename","Date","toISOString","slice","replace","finalFilename","writeFile","error","console","Error","getExportSummary","totalItems","filteredItems"],"sources":["D:/work/komus/3pl-site/src/shared/utils/exportToExcel.ts"],"sourcesContent":["import * as XLSX from 'xlsx';\nimport { PlacedItemDto } from '../../features/inventory-table/model/types';\n\n// Column headers mapping for Excel export\nconst COLUMN_HEADERS = {\n  shk: 'ШК',\n  name: 'Наименование',\n  wr_shk: 'ШК ячейки',\n  wr_name: 'Название ячейки',\n  kolvo: 'Количество',\n  condition: 'Состояние',\n  reason: 'Причина',\n};\n\n// Export data to Excel file\nexport const exportToExcel = (data: PlacedItemDto[], filename?: string): void => {\n  try {\n    // Prepare data for Excel with proper headers\n    const excelData = data.map(item => ({\n      [COLUMN_HEADERS.shk]: item.shk,\n      [COLUMN_HEADERS.name]: item.name,\n      [COLUMN_HEADERS.wr_shk]: item.wr_shk || '',\n      [COLUMN_HEADERS.wr_name]: item.wr_name || '',\n      [COLUMN_HEADERS.kolvo]: item.kolvo,\n      [COLUMN_HEADERS.condition]: item.condition,\n      [COLUMN_HEADERS.reason]: item.reason || '',\n    }));\n\n    // Create workbook and worksheet\n    const workbook = XLSX.utils.book_new();\n    const worksheet = XLSX.utils.json_to_sheet(excelData);\n\n    // Set column widths for better readability\n    const columnWidths = [\n      { wch: 15 }, // ШК\n      { wch: 30 }, // Наименование\n      { wch: 15 }, // ШК ячейки\n      { wch: 30 }, // Название ячейки\n      { wch: 12 }, // Количество\n      { wch: 15 }, // Состояние\n      { wch: 20 }, // Причина\n    ];\n    worksheet['!cols'] = columnWidths;\n\n    // Add worksheet to workbook\n    XLSX.utils.book_append_sheet(workbook, worksheet, 'Размещенный товар');\n\n    // Generate filename with current date if not provided\n    const defaultFilename = `inventory_export_${new Date().toISOString().slice(0, 19).replace(/:/g, '-')}.xlsx`;\n    const finalFilename = filename || defaultFilename;\n\n    // Write and download the file\n    XLSX.writeFile(workbook, finalFilename);\n  } catch (error) {\n    console.error('Error exporting to Excel:', error);\n    throw new Error('Не удалось экспортировать данные в Excel');\n  }\n};\n\n// Get export summary info\nexport const getExportSummary = (totalItems: number, filteredItems: number): string => {\n  if (totalItems === filteredItems) {\n    return `Экспортировано ${totalItems} записей`;\n  }\n  return `Экспортировано ${filteredItems} из ${totalItems} записей (с учетом фильтров)`;\n}; "],"mappings":"AAAA,OAAO,KAAKA,IAAI,MAAM,MAAM;AAG5B;AACA,MAAMC,cAAc,GAAG;EACrBC,GAAG,EAAE,IAAI;EACTC,IAAI,EAAE,cAAc;EACpBC,MAAM,EAAE,WAAW;EACnBC,OAAO,EAAE,iBAAiB;EAC1BC,KAAK,EAAE,YAAY;EACnBC,SAAS,EAAE,WAAW;EACtBC,MAAM,EAAE;AACV,CAAC;;AAED;AACA,OAAO,MAAMC,aAAa,GAAGA,CAACC,IAAqB,EAAEC,QAAiB,KAAW;EAC/E,IAAI;IACF;IACA,MAAMC,SAAS,GAAGF,IAAI,CAACG,GAAG,CAACC,IAAI,KAAK;MAClC,CAACb,cAAc,CAACC,GAAG,GAAGY,IAAI,CAACZ,GAAG;MAC9B,CAACD,cAAc,CAACE,IAAI,GAAGW,IAAI,CAACX,IAAI;MAChC,CAACF,cAAc,CAACG,MAAM,GAAGU,IAAI,CAACV,MAAM,IAAI,EAAE;MAC1C,CAACH,cAAc,CAACI,OAAO,GAAGS,IAAI,CAACT,OAAO,IAAI,EAAE;MAC5C,CAACJ,cAAc,CAACK,KAAK,GAAGQ,IAAI,CAACR,KAAK;MAClC,CAACL,cAAc,CAACM,SAAS,GAAGO,IAAI,CAACP,SAAS;MAC1C,CAACN,cAAc,CAACO,MAAM,GAAGM,IAAI,CAACN,MAAM,IAAI;IAC1C,CAAC,CAAC,CAAC;;IAEH;IACA,MAAMO,QAAQ,GAAGf,IAAI,CAACgB,KAAK,CAACC,QAAQ,CAAC,CAAC;IACtC,MAAMC,SAAS,GAAGlB,IAAI,CAACgB,KAAK,CAACG,aAAa,CAACP,SAAS,CAAC;;IAErD;IACA,MAAMQ,YAAY,GAAG,CACnB;MAAEC,GAAG,EAAE;IAAG,CAAC;IAAE;IACb;MAAEA,GAAG,EAAE;IAAG,CAAC;IAAE;IACb;MAAEA,GAAG,EAAE;IAAG,CAAC;IAAE;IACb;MAAEA,GAAG,EAAE;IAAG,CAAC;IAAE;IACb;MAAEA,GAAG,EAAE;IAAG,CAAC;IAAE;IACb;MAAEA,GAAG,EAAE;IAAG,CAAC;IAAE;IACb;MAAEA,GAAG,EAAE;IAAG,CAAC,CAAE;IAAA,CACd;IACDH,SAAS,CAAC,OAAO,CAAC,GAAGE,YAAY;;IAEjC;IACApB,IAAI,CAACgB,KAAK,CAACM,iBAAiB,CAACP,QAAQ,EAAEG,SAAS,EAAE,mBAAmB,CAAC;;IAEtE;IACA,MAAMK,eAAe,GAAG,oBAAoB,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,EAAE,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,OAAO;IAC3G,MAAMC,aAAa,GAAGjB,QAAQ,IAAIY,eAAe;;IAEjD;IACAvB,IAAI,CAAC6B,SAAS,CAACd,QAAQ,EAAEa,aAAa,CAAC;EACzC,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;IACjD,MAAM,IAAIE,KAAK,CAAC,0CAA0C,CAAC;EAC7D;AACF,CAAC;;AAED;AACA,OAAO,MAAMC,gBAAgB,GAAGA,CAACC,UAAkB,EAAEC,aAAqB,KAAa;EACrF,IAAID,UAAU,KAAKC,aAAa,EAAE;IAChC,OAAO,kBAAkBD,UAAU,UAAU;EAC/C;EACA,OAAO,kBAAkBC,aAAa,OAAOD,UAAU,8BAA8B;AACvF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}